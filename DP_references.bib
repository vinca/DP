@bachelorsthesis{vk-bp,
  author    = {Vincenc Kolařík},
  title     = {Applying OntoUML for structural definitions of Normalized Systems Expanders},
  school    = {Czech Technical University in Prague},
  year      = {2014},
  month     = {May},
  address   = {Prague, Czech Republic},
  type      = {Bachelor's Thesis},
}


%
% NORMALIZED SYSTEMS
%

% THEORY

@Book{ns-recreating,
  author = {Mannaert, Herwig and Verelst, Jan},
  title = {Normalized Systems: Re-creating Information Technology Based on Laws for Software Evolvability},
  year = {2009},
  publisher = {Koppa},
  address = {Antwerp, Belgium},
  isbn = {978-90-77160-00-8},
}

@Book{ns-toward-general-theory,
  author = {De Bruyn, Peter and Mannaert, Herwig and Verelst, Jan},
  title = {Normalized Systems Theory: From Foundations for Evolvable Software Toward a General Theory for Evolvable Design},
  year = {2016},
  publisher = {Koppa},
  address = {Antwerp, Belgium},
  isbn = {978-90-77160-091},
}

@inproceedings{ns-it-isnt-different,
author = {Verelst, Jan and Mannaert, Herwig and Huysmans, Philip},
booktitle={2013 IEEE 15th Conference on Business Informatics}, 
title={"IT Isn't Different After All": Implications of Normalized Systems for the Industrialization of Software Development}, 
year={2013}, 
volume={}, 
number={}, 
pages={356-362}, 
doi={10.1109/CBI.2013.58}, 
ISSN={2378-1963}, 
month={July},
}

@InCollection{ns-exploring-defence,
  year={2011},
  isbn={978-3-642-23387-6},
  booktitle={Practice-Driven Research on Enterprise Transformation},
  volume={89},
  series={Lecture Notes in Business Information Processing},
  editor={Harmsen, Frank and Grahlmann, Knut and Proper, Erik},
  doi={10.1007/978-3-642-23388-3_5},
  title={Exploring Normalized Systems Potential for Dutch MoD’s Agility},
  url={http://dx.doi.org/10.1007/978-3-642-23388-3_5},
  publisher={Springer Berlin Heidelberg},
  keywords={DEMO; Normalized Systems; Agile Enterprise Engineering; Ministry of Defense; case study; SCRUM},
  author={Op ’t Land, Martin and Krouwel, MarienR. and Dipten, Edward and Verelst, Jan},
  pages={110-121}
}

@Article {ns-towards-evolvable,
  author = {Mannaert, Herwig and Verelst, Jan and Ven, Kris},
  title = {Towards evolvable software architectures based on systems theoretic stability},
  journal = {Software: Practice and Experience},
  volume = {42},
  number = {1},
  publisher = {John Wiley & Sons, Ltd},
  issn = {1097-024X},
  url = {http://dx.doi.org/10.1002/spe.1051},
  doi = {10.1002/spe.1051},
  pages = {89--116},
  keywords = {software architecture, patterns, evolvability, systems theory, modularity},
  year = {2012},
}

@Article{ns-in-practice,
author="De Bruyn, Peter
and Mannaert, Herwig
and Verelst, Jan
and Huysmans, Philip",
title="Enabling Normalized Systems in Practice -- Exploring a Modeling Approach",
journal="Business {\&} Information Systems Engineering",
year="2018",
month="Feb",
day="01",
volume="60",
number="1",
pages="55--67",
abstract="Contemporary organizations are required to adapt to a changing environment in an agile way, which is often deemed very challenging. Normalized Systems (NS) theory attempts to build highly evolvable software systems by using systems theory as its theoretical underpinning. A modeling method which supports the identification of the NS elements, required for building NS sofware in practice, is currently missing. Therefore, the paper introduces an approach for creating both data models and processing models in the context of NS, as well as their integration. It is discussed how these models can be taken as the input for the actual creation of evolutionary prototypes by using an earlier developed supporting tool. The modeling approach and its suitability for feeding the tool are evaluated to discover their current strengths and weaknesses.",
issn="1867-0202",
doi="10.1007/s12599-017-0510-4",
url="https://doi.org/10.1007/s12599-017-0510-4"
}



@Misc{ns-wiki,
   author = {Wikipedia},
   title ={\emph{Normalized Systems}},
   year = {2014},
   howpublished = {[ONLINE]},
   url = {http://en.wikipedia.org/wiki/Normalized_Systems},
   note = {[accessed: 1. 3. 2014]},
 }


% EXPANDERS

@Manual{nse-ref,
  author = {Adriaenssens, Paul and Mannaert, Herwig},
  title = {NS Expanders v2.3 Element Expanders Reference Guide},
  year = {2013},
  version = {1.03},
  note = {working copy provided by NSX bvba},
  publisher = {NSX bvba, Edegem, Belgium},
}

@Manual{nse-dev,
  author = {Adriaenssens, Paul and Mannaert, Herwig},
  title = {Normalized Systems Expanders v2.3 Development Guide},
  year = {2013},
  subtitle = {Normalized Systems Tutorial, The EuRent Case},
  version = {1.00},
  note = {working copy provided by NSX bvba},
  publisher = {NSX bvba, Edegem, Belgium},
}

%
% Microservices
%

% SCIENCE
@Article{ms-self-managing,
  title = "Self-managing cloud-native applications: Design, implementation, and experience",
  journal = "Future Generation Computer Systems",
  volume = "72",
  pages = "165 - 179",
  year = "2017",
  issn = "0167-739X",
  doi = "https://doi.org/10.1016/j.future.2016.09.002",
  url = "http://www.sciencedirect.com/science/article/pii/S0167739X16302977",
  author = "Giovanni Toffetti and Sandro Brunner and Martin Blöchlinger and Josef Spillner and Thomas Michael Bohnert",
  keywords = "Micro services, Cloud-native applications, Container-based applications, Distributed systems, Auto-scaling, Health-management",
  abstract = "Running applications in the cloud efficiently requires much more than deploying software in virtual machines. Cloud applications have to be continuously managed: (1) to adjust their resources to the incoming load and (2) to face transient failures replicating and restarting components to provide resiliency on unreliable infrastructure. Continuous management monitors application and infrastructural metrics to provide automated and responsive reactions to failures (health management) and changing environmental conditions (auto-scaling) minimizing human intervention. In the current practice, management functionalities are provided as infrastructural or third party services. In both cases they are external to the application deployment. We claim that this approach has intrinsic limits, namely that separating management functionalities from the application prevents them from naturally scaling with the application and requires additional management code and human intervention. Moreover, using infrastructure provider services for management functionalities results in vendor lock-in effectively preventing cloud applications to adapt and run on the most effective cloud for the job. In this paper we discuss the main characteristics of cloud native applications, propose a novel architecture that enables scalable and resilient self-managing applications in the cloud, and relate on our experience in porting a legacy application to the cloud applying cloud-native principles."
}

@InProceedings{ms-taxonomy,
  author = "Garriga, Martin",
  editor = "Cerone, Antonio and Roveri, Marco",
  title = "Towards a Taxonomy of Microservices Architectures",
  booktitle = "Software Engineering and Formal Methods",
  year = "2018",
  publisher = "Springer International Publishing",
  address = "Cham",
  pages = "203--218",
  abstract = "The microservices architectural style is gaining more and more momentum for the development of applications as suites of small, autonomous, and conversational services, which are then easy to understand, deploy and scale. However, the proliferation of approaches leveraging microservices calls for a systematic way of analyzing and assessing them as a completely new ecosystem: the first cloud-native architectural style. This paper defines a preliminary analysis framework in the form of a taxonomy of concepts, encompassing the whole microservices lifecycle, as well as organizational aspects. This framework is necessary to enable effective exploration, understanding, assessing, comparing, and selecting microservice-based models, languages, techniques, platforms, and tools. Then, we analyze state of the art approaches related to microservices using this taxonomy to provide a holistic perspective of available solutions.",
  isbn = "978-3-319-74781-1"
}

@Article{ms-enables-devops,
  author = {Balalaie, Armin and Heydarnoori, Abbas and Jamshidi, Pooyan},
  year = {2016},
  month = {05},
  pages = {1-1},
  title = {Microservices Architecture Enables DevOps: an Experience Report on Migration to a Cloud-Native Architecture},
  volume = {33},
  journal = {IEEE Software},
  doi = {10.1109/MS.2016.64},
}

@inProceedings{ms-approaches-to-soa-evolution,
	author = "Wilde, Norman and Gonen, Bilal and El-Sheikh, Eman and Zimmermann, Alfred",
	editor = "El-Sheikh, Eman and Zimmermann, Alfred and Jain, Lakhmi C.",
	title = "Approaches to the Evolution of SOA Systems",
	bookTitle = "Emerging Trends in the Evolution of Service-Oriented and Enterprise Architectures",
	year = "2016",
	publisher = "Springer International Publishing",
	address = "Cham",
	pages = "5--21",
	abstract = "The evolution of Services Oriented Architectures (SOA) presents many challenges due to their complex, dynamic and heterogeneous nature. We describe how SOA design principles can facilitate SOA evolvability and examine several approaches to support SOA evolution. SOA evolution approaches can be classified based on the level of granularity they address, namely, service code level, service interaction level and model level. We also discuss emerging trends, such as microservices and knowledge-based support, which can enhance the evolution of future SOA systems.",
	isbn="978-3-319-40564-3",
	doi="10.1007/978-3-319-40564-3_2",
	url="https://doi.org/10.1007/978-3-319-40564-3_2"
}

@InProceedings{ms-design-tradeoffs, 
  author={S. Hassan and R. Bahsoon}, 
  booktitle={2016 IEEE International Conference on Services Computing (SCC)}, 
  title={Microservices and Their Design Trade-Offs: A Self-Adaptive Roadmap}, 
  year={2016}, 
  volume={}, 
  number={}, 
  pages={813-818}, 
  abstract={Migrating to microservices (microservitization) enables optimising the autonomy, replaceability, decentralised governance and traceability of software architectures. Despite the hype for microservitization , the state of the art still lacks consensus on the definition of microservices, their properties and their modelling techniques. This paper summarises views of microservices from informal literature to reflect on the foundational context of this paradigm shift. A strong foundational context can advance our understanding of microservitization and help guide software architects in addressing its design problems. One such design problem is finalising the optimal level of granularity of a microservice architecture. Related design trade-offs include: balancing the size and number of microservices in an architecture and balancing the nonfunctional requirement satisfaction levels of the individual microservices as well as their satisfaction for the overall system. We propose how self-adaptivity can assist in addressing these design trade-offs and discuss some of the challenges such a selfadaptive solution. We use a hypothetical online movie streaming system to motivate these design trade-offs. A solution roadmap is presented in terms of the phases of a feedback control loop.}, 
  keywords={formal specification;software architecture;software architectures;microservice architecture granularity;nonfunctional requirement satisfaction levels;self-adaptivity;online movie streaming system;feedback control loop;microservitization;Motion pictures;Computer architecture;Business;Context;Software;Quality of service;Browsers;microservices;trade-offs;non-functional requirements;granularity;self-adaptativity;decision-making}, 
  doi={10.1109/SCC.2016.113}, 
  ISSN={}, 
  month={June},
}

@book{ms-towards-integrated-soa,
author = {Zimmermann, Alfred and Sandkuhl, Kurt and Pretz, Michael and Falkenthal, Michael and Jugel, Dierk and Wißotzki, Matthias},
year = {2013},
month = {08},
pages = {26-30},
title = {Towards an integrated service-oriented reference enterprise architecture},
publisher = {O'Reilly Media, Inc.},
isbn = {1491956259 9781491956250}
}

@article{ms-underestimated-network-impact,
  author    = {Nane Kratzke},
  title     = {About Microservices, Containers and their Underestimated Impact on Network Performance},
  journal   = {CoRR},
  volume    = {abs/1710.04049},
  year      = {2017},
  url       = {http://arxiv.org/abs/1710.04049},
  archivePrefix = {arXiv},
  eprint    = {1710.04049},
  timestamp = {Mon, 13 Aug 2018 16:48:05 +0200},
  biburl    = {https://dblp.org/rec/bib/journals/corr/abs-1710-04049},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}

@INPROCEEDINGS{ms-integrating-with-adaptable-ea, 
author={J. Bogner and A. Zimmermann}, 
booktitle={2016 IEEE 20th International Enterprise Distributed Object Computing Workshop (EDOCW)}, 
title={Towards Integrating Microservices with Adaptable Enterprise Architecture}, 
year={2016}, 
volume={}, 
number={}, 
pages={1-6}, 
keywords={information systems;service-oriented architecture;microservices integration;IT environments;Internet of Things components;mobility systems;adaptable ecosystems;service-oriented enterprise architectures;self-optimizing systems;resilient run-time environments;distributed information systems;enterprise architecture methodologies;digital transformation;adaptable digital enterprise architectures;Computer architecture;Adaptation models;Business;Biological system modeling;Unified modeling language;Context;Service-oriented architecture}, 
doi={10.1109/EDOCW.2016.7584392}, 
ISSN={2325-6605}, 
month={Sep.},}


% ENGINEERING BOOKS

@Book{ms-building-ms,
  author = {Newman, Sam},
  title = {Building Microservices: Designing Fine-Grained Systems},
  year = {2015},
  publisher = {O'Reilly Media, Inc.},
  isbn = {978-1-491-95035-7},
}

@Book{ms-evolutionary-arch,
  author = {Ford, Neal and Kua, Patrick and Parsons, Rebecca},
  title = {Building Evolutionary Architectures: Support Constant Change},
  year = {2017},
  publisher = {O'Reilly Media, Inc.},
  isbn = {978-1-491-98636-3},
}

@book{ms-ca,
 author = {Nadareishvili, Irakli and Mitra, Ronnie and McLarty, Matt and Amundsen, Mike},
 title = {Microservice Architecture: Aligning Principles, Practices, and Culture},
 year = {2016},
 isbn = {1491956259, 9781491956250},
 edition = {1st},
 publisher = {O'Reilly Media, Inc.},
} 


@Book{ms-vs-soa,
  author = {Richards, Mark},
  title = {Microservices vs. Service-Oriented Architecture},
  year = {2016},
  publisher = {O'Reilly Media, Inc.},
  isbn = {978-1-491-94160-7},
}

@book{ms-patterns,
  title={Microservice Patterns},
  author={Richardson, C.},
  isbn={9781617294549},
  url={https://books.google.cz/books?id=UeK1swEACAAJ},
  year={2018},
  publisher={Manning Publications Company}
}


% CONFERENCES, BLOGS ETC.

@Misc{ms-fow-new-term-def,
  author = {Fowler, Martin and Lewis, James},
  title = {\emph{Microservices: a definition of this new architectural term}},
  year = {2014},
  howpublished = {[ONLINE]},
  url = {https://martinfowler.com/articles/microservices.html},
  note = {[accessed: 1. 2. 2017]},
}

@Misc{ms-fow-tradeoffs,
  author = {Fowler, Martin and Lewis, James},
  title = {\emph{Microservice tradeoffs}},
  year = {2015},
  howpublished = {[ONLINE]},
  url = {https://martinfowler.com/articles/microservice-trade-offs.html},
  note = {[accessed: 1. 2. 2017]},
}

@Misc{ms-fow-law-dist,
  author = {Fowler, Martin},
  title = {\emph{Microservices and the First Law of Distributed Objects}},
  year = {2014},
  howpublished = {[ONLINE]},
  url = {https://martinfowler.com/articles/distributed-objects-microservices.html},
  note = {[accessed: 1. 2. 2017]},
}

@Misc{ms-fow-monolith-first,
  author = {Fowler, Martin},
  title = {\emph{Monolith First}},
  year = {2015},
  howpublished = {[ONLINE]},
  url = {https://martinfowler.com/bliki/MonolithFirst.html},
  note = {[accessed: 7. 6. 2018]},
}

@Misc{ms-who-is-using,
  author = {Richardson, Chris},
  title = {\emph{Microservices architecture}},
  year = {2018},
  howpublished = {[ONLINE]},
  url = {https://microservices.io/articles/whoisusingmicroservices.html},
  note = {[accessed: 10. 4. 2018]},
}

@Misc{ms-goto-challenges-george,
  author = {George, Fred},
  title = {\emph{Challenges in implementing microservices}},
  year = {2015},
  howpublished = {[ONLINE]},
  url = {http://gotocon.com/dl/goto-amsterdam-2015/slides/FredGeorgeChallengesInImplementingMicroServices.pdf},
  note = {[accessed: 10. 4. 2018]},
}

@Misc{ms-spotify,
  author = {Gonzalo, P.},
  title = {\emph{Microservices Architecture at Spotify}},
  year = {2015},
  howpublished = {[ONLINE]},
  url = {https://medium.com/codebase/microservices-architecture-at-spotify-beac905e9622},
  note = {[accessed: 25. 6. 2018]},
}

@Misc{ms-3-pillars,
  author = {Amundsen, Mike},
  title = {\emph{Three Pillars of Microservice Culture}},
  year = {2016},
  howpublished = {[ONLINE]},
  url = {https://www.oreilly.com/ideas/three-pillars-of-microservice-culture},
  note = {[accessed: 25. 6. 2018]},
}

@Misc{ms-modelling-with-petter,
  author = {Mahlen, Petter},
  title = {\emph{Modeling Microservices at Spotify with Petter Mahlen}},
  year = {2106},
  howpublished = {[ONLINE]},
  url = {https://dzone.com/articles/modeling-microservices-at-spotify-with-petter-mari},
  note = {[accessed: 5. 9. 2018]},
}

@Misc{ms-spotify-horizontal-scaling,
  author = {Nick Barkas},
  title = {\emph{Spotify: Horizontal scalability for great success}},
  year = {2011},
  howpublished = {[ONLINE]},
  url = {https://www.youtube.com/watch?v=BBAfIYpDMX4},
  note = {[accessed: 11. 11. 2017]},
}


@Misc{ms-ebay-ds-scalability,
  author = {Mansi Narula},
  title = {\emph{An Approach to Achieve Scalability and Availability of Data Stores}},
  year = {2017},
  howpublished = {[ONLINE]},
  url = {https://www.ebayinc.com/stories/blogs/tech/an-approach-to-achieve-scalability-and-availability-of-data-stores/},
  note = {[accessed: 11. 11. 2017]},
}

@Misc{ms-ebay-scalability-best-practices,
  author = {Randy Shoup},
  title = {\emph{An Approach to Achieve Scalability and Availability of Data Stores}},
  year = {2008},
  howpublished = {[ONLINE]},
  url = {https://www.infoq.com/articles/ebay-scalability-best-practices},
  note = {[accessed: 11. 11. 2017]},
}




%
% STANDARDS
%

@Book{std-EBNF,
  author = "{ISO/IEC 14977}",
  publisher = {International Organization for Standardization, Geneva, Switzerland},
  title = {Information technology -- Syntactic metalanguage -- Extended BNF},
  year = {1996},
}

@Book{std-OCL,
  author = "{ISO/IEC 19507}",
  publisher = {International Organization for Standardization, Geneva, Switzerland},
  title = {Information technology -- Object Management Group -- Object Constraint Language (OCL)},
  year = {2012},
}

@Book{std-XML10,
  author = "{World Wide Web Consortium (W3C)}",
  publisher = {International Organization for Standardization, Geneva, Switzerland},
  title = {Extensible Markup Language (XML) 1.0 (Fifth Edition)},
  url = {http://www.w3.org/TR/2008/REC-xml-20081126/},
  year = {2008},
}

@Book{std-UML-structural,
  author = "{Object Management Group (OMG)}",
  publisher = {Object Management Group, Inc., Needham, MA, USA},
  title = {OMG Unified Modeling Language (OMG UML), Superstructure},
  url = {http://www.omg.org/spec/UML/2.4.1/Superstructure/PDF/},
  year = {2011},
}

@TechReport{std-ieee-arch, 
   Author = {{ISO/IEC 42010:2007(E)}},
   Title = {IEEE Recommended Practice for Architectural Description of Software-Intensive Systems},
   publisher = {IEEE Computer Society},
   Institution = {IEEE Computer Society},
   Year = {2000},
} 

%
% GENERAL IT
%

@ARTICLE{arch-41-views, 
author={P. B. Kruchten}, 
journal={IEEE Software}, 
title={The 4+1 View Model of Architecture}, 
year={1995}, 
volume={12}, 
number={6}, 
pages={42-50}, 
keywords={software engineering;entity-relationship modelling;object-oriented methods;distributed processing;4+1 View Model;software architecture;design decisions;validation;design object model;object-oriented design method;data-driven application design;entity-relationship diagram;concurrency;synchronization;physical view;software mapping;hardware;distributed aspect;development view;software static organization;development environment;Computer architecture;Software architecture;Design methodology;Scalability;Physics computing;Data engineering;Application software;Concurrent computing;Hardware;Software design}, 
doi={10.1109/52.469759}, 
ISSN={0740-7459}, 
month={Nov},}

@techreport{sa-intro-garlan-shaw,
 author = {Garlan, David and Shaw, Mary},
 title = {An Introduction to Software Architecture},
 year = {1994},
 source = {http://www.ncstrl.org:8900/ncstrl/servlet/search?formname=detail\&id=oai%3Ancstrlh%3Acmucs%3ACMU%2F%2FCS-94-166},
 publisher = {Carnegie Mellon University},
 institution = {Carnegie Mellon University},
 address = {Pittsburgh, PA, USA},
}
@Misc{sa-hexagonal,
  author = {Cockburn, Alistair},
  title = {\emph{Hexagonal Architecture}},
  year = {2007},
  howpublished = {[ONLINE]},
  url = {http://alistair.cockburn.us/Hexagonal+architecture},
  note = {[accessed: 2. 12. 2017]},
}

@article{3-phase-commit,
  title={Increasing the resilience of distributed and replicated database systems},
  author={Keidar, Idit and Dolev, Danny},
  journal={Journal of Computer and System Sciences},
  volume={57},
  number={3},
  pages={309--324},
  year={1998},
  publisher={Academic Press}
}

@Misc{conways-law,
  author = {Conway, Mel},
  title = {\emph{Conway's Law}},
  year = {1967},
  howpublished = {[ONLINE]},
  url = {http://www.melconway.com/Home/Conways_Law.html},
  note = {[accessed: 25. 6. 2018]},
}


@Misc{big-ball-mud,
  author = {Brian Foote and Joseph Yoder},
  title = {\emph{Big Ball of Mud}},
  year = {1999},
  howpublished = {[ONLINE]},
  url = {http://www.laputan.org/mud/mud.html},
  note = {[accessed: 4. 10. 2018]},
}


@Article{slr-guidelines,
author = {BA, Kitchenham and Charters, Stuart},
year = {2007},
month = {01},
pages = {},
title = {Guidelines for performing Systematic Literature Reviews in Software Engineering},
volume = {2}
}

@book{documenting-sw-arch,
 author = {Clements, Paul and Garlan, David and Bass, Len and Stafford, Judith and Nord, Robert and Ivers, James and Little, Reed},
 title = {Documenting Software Architectures: Views and Beyond},
 year = {2002},
 isbn = {0201703726},
 publisher = {Pearson Education},
} 

@Book{information-systems-98,
  author = {Alter, Steven},
  title = {Information Systems},
  year = {1998},
  edition = {3rd},
  publisher = {Addison-Wesley Longman Publishing Co., Inc.},
  address = {Boston, MA, USA},
  isbn = {0201351099}
}

@Misc{history-is,
  author = {Bryant, Antony and Black, Alistair and Land, Frank and Porra, Jaana},
  title = {Information Systems history: What is history? What is IS history? What IS history? \ldots and why even bother with history?},
  journal = {Journal of Information Technology},
  year = {3/2013},
  publisher = {Association for Information Technology Trust},
  howpublished = {[ONLINE]},
  note = {[accessed: 10. 1. 2014]},
  url = {http://dx.doi.org/10.1057/jit.2013.3},
  key = {0268-3962},
  pages = {1-17},
}

@Article{lehman-1980-programs,
  title={Programs, life cycles, and laws of software evolution},
  author={Lehman, Meir M},
  journal={Proceedings of the IEEE},
  volume={68},
  number={9},
  pages={1060--1076},
  year={1980},
  publisher={IEEE}
}

@InProceedings{mcilroy-1968-mass-software,
  title={Mass-produced software components},
  author={McIlroy, M Douglas and Buxton, JM and Naur, Peter and Randell, Brian},
  booktitle={Proceedings of the 1st International Conference on Software Engineering, Garmisch Pattenkirchen, Germany},
  pages={88--98},
  year={1968},
  organization={sn}
}

@Misc{codiscent,
  author = {Zeev Chared and others},
  title = {Application Development Using Codiscent Generative Technology and Methodology},
  institution = {CodiScent Ltd.},
  year = {2012},
  howpublished = {[ONLINE]},
  url = {http://ccm.fit.cvut.cz/wp-content/uploads/2013/10/CodiScent-Technology-and-Methodology.pdf},
  note = {[accessed: 19. 11. 2013]},
}

@Misc{java-keywords,
  author = "{Oracle corp.}",
  title = {\emph{Java Language Keywords}},
  year = {2014},
  howpublished = {[ONLINE]},
  url = {http://docs.oracle.com/javase/tutorial/java/nutsandbolts/_keywords.html},
  note = {[accessed: 25. 3. 2014]},
}

@Misc{java-conventions,
  author = {Leahy, Paul},
  title = {\emph{Java Naming Conventions}},
  year = {2014},
  howpublished = {[ONLINE]},
  url = {http://java.about.com/od/javasyntax/a/nameconventions.htm},
  note = {[accessed: 25. 3. 2014]},
}

@Misc{devops-what-is,
  author = {{Amazon.com, Inc.}},
  title = {\emph{What Is DevOps?}},
  year = {2018},
  howpublished = {[ONLINE]},
  url = {https://aws.amazon.com/devops/what-is-devops/},
  note = {[accessed: 3. 6. 2018]},
}

@Misc{devops-deploying-hourly,
  author = {Asami Novak},
  title = {\emph{Going to Market Faster: Most Companies Are Deploying Code Weekly, Daily, or Hourly}},
  year = {2016},
  howpublished = {[ONLINE]},
  url = {https://blog.newrelic.com/technology/data-culture-survey-results-faster-deployment/},
  note = {[accessed: 9. 12. 2018]},
}

@Misc{devops-fallacies,
  author = {Rotem-Gal-Oz, Arnon},
  year = {2007},
  title = {\emph{Fallacies of Distributed Computing Explained}},
  howpublished = {[ONLINE]},
  url = {http://www.rgoarchitects.com/Files/fallacies.pdf},
  note = {[accessed: 25. 11. 2018]},
}

@book{domain-driven-design,
 author = {Evans, Eric J.},
 title = {Domain-Driven Design: Tacking Complexity In the Heart of Software},
 year = {2003},
 isbn = {0321125215},
 publisher = {Addison-Wesley Longman Publishing Co., Inc.},
 address = {Boston, MA, USA},
} 

@book{martin-agile-sw-dev,
  title={Agile Software Development: Principles, Patterns, and Practices},
  author={Martin, R.C. and Rabaey, J.M. and Chandrakasan, A.P. and Nikolic, B.},
  isbn={9780135974445},
  lccn={95022672},
  series={Alan Apt series},
  year={2003},
  publisher={Pearson Education}
}

@Misc{innovation-well-oiled-machine,
  author = {Ron Ashkenas and Markus Spiegel},
  year = {2015},
  title = {\emph{Your Innovation Team Shouldn’t Run Like a Well-Oiled Machine}},
  howpublished = {[ONLINE]},
  url = {https://hbr.org/2015/10/your-innovation-team-shouldnt-run-like-a-well-oiled-machine},
  note = {[accessed: 20. 12. 2018]},
}
